#include <stdio.h>
#include <stdlib.h>

int main(){
  int **x;
  int numberOfLines, numberOfColumns, i, j;
  int *y;
  int numberOfElements, k=0;
  
  //Having the matrix's size pre-defined as 8
  numberOfLines = 8;
  numberOfColumns = 8;
  
  //Having the user define the size of the matrix
  /*printf("How many lines do you want in your matrix? ");
  scanf("%d", &numberOfLines);
  printf("\nHow many columns do you want in your matrix? ");
  scanf("%d", &numberOfColumns);*/
  
  //Making sure that the vector's size comports all of the matrix's elements
  numberOfElements = numberOfColumns * numberOfLines;
 
  //Allocating space for the matrix
  x = malloc(numberOfLines * sizeof(int*));
  for(i=0; i<numberOfLines; i++){
    x[i] = malloc(numberOfColumns * sizeof(int));
  }
  
  //Allocating space for the vector
  y = malloc(numberOfElements * sizeof(int*));

  //Filling up the matrix in a checkered pattern, so they look better in the vector
  for(i=0; i<numberOfLines; i++){
    for(j=0; j<numberOfColumns; j++){
      if(j%2 == 0){
          if(i%2 == 0){
              x[i][j] = 0;
          }else{
              x[i][j] = 1;
          }
      }else{
          if(i%2 == 0){
              x[i][j] = 1;
          }else{
              x[i][j] = 0;
          }
      }
    }
  }

  //Printing the matrix
  printf("\n");
  for(i=0; i<numberOfLines; i++){
    for(j=0; j<numberOfColumns; j++){
      printf("%2d ", x[i][j]);
    }
    printf("\n");
  }
  
  for(i=0; i<numberOfLines; i++){
    for(j=0; j<numberOfColumns; j++){
      y[k] = x[i][j];
      k++;
    }
  }
  
  //Printing the vector
  printf("\n");
  for(i=0; i<numberOfElements; i++){
      printf("%d ", y[i]);
  }
    
  //Freeing the memory that was allocated
  for(i=0; i<numberOfLines; i++){
    free(x[i]);
  }
  free(x);
  free(y);
  
  return 0;
}

RESPOSTA FINAL:
Realocando a matriz linha por linha, de cima para baixo, para um novo vetor,
ele irá corresponder as qualidades esperadas pela questão, tendo em vista que
os primeiros elementos (que seriam as primeiras linhas da matriz) de um vetor
são os de mais importância, contém os bytes mais significativos, e os últimos
elementos (linhas inferiores da matriz) guardam os bytes de menor significância.

Portanto, precisei, após a construção da matriz com os elementos escolhidos, de
dois laços de repetição que percorressem linhas e colunas na matriz com os índices
'i' e 'j' sendo usados também como contadores, de um número para limitar a quantidade
de linhas e colunas ('numberOfLines' e 'numberOfColumns')e de um terceiro contador,
'k', que também fosse sendo incrementado de um em um para atuar como índice do meu vetor.
Dentro desses laços apenas igualei o elemento correspondente da matriz para o vetor
usando esses índices como posições deles e depois dentro de um outro laço, com um índice
'i' que percorra o comprimento do vetor, delimitado pelo 'numberOfElements' que é a
multiplicação das duas outras variáveis citadas previamente ('numberOfLines' e
'numberOfColumns'), imprimi os valores do novo vetor através de um printf.*/
